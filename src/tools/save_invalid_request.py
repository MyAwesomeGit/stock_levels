import datetimeimport jsonfrom src.tools.connection_creator import ConnectionCreatorfrom src.model.queries_storage import QueriesStoragefrom src.model.stock_levels_messages import StockLevelsMessagesfrom src.tools.stock_levels_logging import stock_levels_loggingdef save_invalid_request(received_request_content, errors):    try:        message_type = 'incoming_request'        message_status = 'invalid'        message_datetime = datetime.datetime.now()        message_data = json.dumps(received_request_content)        data = {"message_type": message_type,                "message_status": message_status,                "message_datetime": message_datetime,                "message_data": message_data}        conn = ConnectionCreator.create_connection()        with conn:            cur = conn.cursor()            cur.execute(QueriesStorage.insert_into_log_table, data)            conn.commit()            log_id = cur.fetchone()[0]            error_text = json.dumps(errors, ensure_ascii=False)            data = {"log_id": log_id,                    "error_text": error_text}            cur.execute(QueriesStorage.insert_into_error_table, data)            conn.commit()        stock_levels_logging.info(StockLevelsMessages.data_added_to_table)        stock_levels_logging.info(data)    except Exception as e:        raise Exception(f"save_incoming_request_exception: {str(e)}")