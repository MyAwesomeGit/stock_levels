from src.tools.connection_creator import ConnectionCreatorfrom src.model.queries_storage import QueriesStoragefrom src.model.stock_levels_messages import StockLevelsMessagesfrom src.tools.stock_levels_logging import stock_levels_loggingclass TablesAdministrator:    @staticmethod    def is_table_exists() -> bool:        conn = ConnectionCreator.create_connection()        with conn:            cur = conn.cursor()            cur.execute(QueriesStorage.select_exists_stock_levels)            table_exists = cur.fetchone()[0]            if table_exists:                return True    @staticmethod    def create_tables():        conn = ConnectionCreator.create_connection()        with conn:            cur = conn.cursor()            cur.execute(QueriesStorage.create_table_stock_levels)        stock_levels_logging.info(StockLevelsMessages.table_created)    @staticmethod    def add_data_to_tables():        conn = ConnectionCreator.create_connection()        with conn:            cur = conn.cursor()            cur.execute(QueriesStorage.insert_into_stock_levels)        stock_levels_logging.info(StockLevelsMessages.data_added_to_table)    @staticmethod    def is_log_table_exists() -> bool:        conn = ConnectionCreator.create_connection()        with conn:            cur = conn.cursor()            cur.execute(QueriesStorage.select_exists_log_table)            table_exists = cur.fetchone()[0]            if table_exists:                return True    @staticmethod    def create_log_table():        conn = ConnectionCreator.create_connection()        with conn:            cur = conn.cursor()            cur.execute(QueriesStorage.create_log_table)        stock_levels_logging.info(StockLevelsMessages.table_created)