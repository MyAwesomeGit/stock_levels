import datetimefrom connection_creator import ConnectionCreatorfrom src.model.queries_storage import QueriesStoragefrom src.model.stock_levels_messages import StockLevelsMessagesfrom stock_levels_logging import stock_levels_loggingdef save_incoming_request(input_data):    try:        message_type = 'incoming_request'        message_status = 'valid'        message_datetime = datetime.datetime.now()        message_data = input_data.json()        data = {"message_type": message_type,                "message_status": message_status,                "message_datetime": message_datetime,                "message_data": message_data}        stock_levels_logging.info(f"query: {QueriesStorage.insert_into_log_table}")        stock_levels_logging.info(f"data: {data}")        conn = ConnectionCreator.create_connection()        with conn:            cur = conn.cursor()            cur.execute(QueriesStorage.insert_into_log_table, data)            conn.commit()            res = cur.fetchone()            row_id = res[0]            cur.execute("SELECT * FROM log_table ORDER BY log_id DESC;")            inserted_date = cur.fetchone()            print(f"inserted_data: {inserted_date}")            stock_levels_logging.info(f"inserted_data: {inserted_date}")        stock_levels_logging.info(StockLevelsMessages.data_added_to_table)        return row_id    except Exception as e:        return f"save_incoming_request_exception: {str(e)}"