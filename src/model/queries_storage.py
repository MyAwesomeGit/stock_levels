class QueriesStorage:    health_check_query = """        SELECT current_database();    """    select_exists_stock_levels = """    SELECT EXISTS (        SELECT FROM information_schema.tables         WHERE table_name = 'stock_levels');    """    create_table_stock_levels = """    CREATE TABLE stock_levels (        row_id BIGSERIAL PRIMARY KEY,        branch_id BIGINT NOT NULL,        product_id BIGINT NOT NULL,            product_quantity INT NOT NULL CHECK (product_quantity >= 0),        product_description TEXT NOT NULL,        product_price NUMERIC(10, 2) NOT NULL CHECK (product_price >= 0),        operator_id BIGINT NOT NULL,        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP);    """    insert_into_stock_levels = """    INSERT INTO stock_levels (branch_id, product_id, product_quantity, product_description, product_price, operator_id) VALUES        (1, 1, 100, 'Свежие яблоки', 1.50, 1),  -- Яблоки в Main Warehouse        (1, 2, 200, 'Спелые бананы', 0.75, 1),  -- Бананы в Main Warehouse        (1, 3, 150, 'Сочные апельсины', 1.20, 1),  -- Апельсины в Main Warehouse        (1, 4, 300, 'Свежая морковь', 0.50, 2),  -- Морковь в Main Warehouse        (1, 5, 500, 'Картофель', 0.30, 2),  -- Картофель в Main Warehouse        (2, 6, 100, 'Помидоры', 1.00, 1),  -- Помидоры в East Branch        (2, 7, 80, 'Виноград', 2.50, 1),  -- Виноград в East Branch        (2, 8, 120, 'Огурцы', 0.80, 2),  -- Огурцы в East Branch        (2, 9, 90, 'Лимоны', 1.10, 2),  -- Лимоны в East Branch        (2, 10, 200, 'Лук', 0.40, 2);  -- Лук в East Branch    """    select_product_details = """    SELECT product_quantity, product_description        FROM public.stock_levels        WHERE branch_id = %s AND product_id = %s;    """    select_exists_log_table = """    SELECT EXISTS (        SELECT 1         FROM information_schema.tables         WHERE table_schema = 'public'         AND table_name = 'log_table'        );    """    create_log_table = """    CREATE TABLE public.log_table (        log_id BIGSERIAL PRIMARY KEY,        message_type TEXT NOT NULL,        message_status TEXT NOT NULL,        message_datetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        message_data TEXT NOT NULL);    """    insert_into_log_table = """    INSERT INTO public.log_table (        message_type, message_status, message_datetime, message_data    )    VALUES (        %(message_type)s,        %(message_status)s,        %(message_datetime)s,        %(message_data)s    )    RETURNING log_id;    """    create_error_table = """    CREATE TABLE public.error_table (        error_id BIGSERIAL PRIMARY KEY,        log_id BIGINT NOT NULL,        error_text TEXT NOT NULL,        CONSTRAINT fk_log_table FOREIGN KEY (log_id) REFERENCES public.log_table(log_id)    );    """    insert_into_error_table = """    INSERT INTO public.error_table (    	log_id, error_text    )	VALUES (        %(log_id)s,        %(error_text)s    );    """