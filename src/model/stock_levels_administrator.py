from fastapi import statusfrom fastapi.responses import JSONResponsefrom src.tools.connection_creator import ConnectionCreatorfrom src.model.queries_storage import QueriesStoragefrom src.tools.stock_levels_logging import stock_levels_loggingfrom src.model.stock_levels_messages import StockLevelsMessagesclass StockLevelsAdministrator:    @staticmethod    def get_stock_quantity(branch_id, product_id):        conn = ConnectionCreator.create_connection()        if not conn:            return JSONResponse(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,                                content={                                    "error_description": StockLevelsMessages.database_connection_error                                }                                )        cur = conn.cursor()        cur.execute(QueriesStorage.select_product_details, (branch_id, product_id))        result = cur.fetchone()        stock_levels_logging.info(f"{StockLevelsMessages.query_result}: {result}")        cur.close()        conn.close()        if not result:            return JSONResponse(status_code=404,                                content={                                    "error_description": StockLevelsMessages.item_not_found                                }                                )        response = JSONResponse(            status_code=status.HTTP_200_OK,            content={                "branch_id": branch_id,                "product_id": product_id,                "quantity": result[0],                "product_description": result[1]            }        )        return response